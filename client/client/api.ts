/* tslint:disable */
/* eslint-disable */
/**
 * niko
 * niko
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Niko
 */
export interface Niko {
    /**
     * 
     * @type {number}
     * @memberof Niko
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Niko
     */
    'mood': string;
    /**
     * 
     * @type {string}
     * @memberof Niko
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Niko
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof Niko
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Niko
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Niko
     */
    'user_id'?: number;
}

/**
 * NikosApi - axios parameter creator
 * @export
 */
export const NikosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create nikos
         * @summary createNikos
         * @param {Niko} [niko] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNikos: async (niko?: Niko, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nikos.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(niko, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * index nikos
         * @summary indexNikos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexNikos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nikos.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * show nikos
         * @summary showNikos
         * @param {string} nikoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNikos: async (nikoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nikoId' is not null or undefined
            assertParamExists('showNikos', 'nikoId', nikoId)
            const localVarPath = `/api/v1/nikos/{nikoId}`
                .replace(`{${"nikoId"}}`, encodeURIComponent(String(nikoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update nikos
         * @summary updateNikos
         * @param {string} nikoId 
         * @param {Niko} [niko] Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNikos: async (nikoId: string, niko?: Niko, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nikoId' is not null or undefined
            assertParamExists('updateNikos', 'nikoId', nikoId)
            const localVarPath = `/api/v1/nikos/{nikoId}`
                .replace(`{${"nikoId"}}`, encodeURIComponent(String(nikoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(niko, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NikosApi - functional programming interface
 * @export
 */
export const NikosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NikosApiAxiosParamCreator(configuration)
    return {
        /**
         * create nikos
         * @summary createNikos
         * @param {Niko} [niko] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNikos(niko?: Niko, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Niko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNikos(niko, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * index nikos
         * @summary indexNikos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexNikos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Niko>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexNikos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * show nikos
         * @summary showNikos
         * @param {string} nikoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showNikos(nikoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Niko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showNikos(nikoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update nikos
         * @summary updateNikos
         * @param {string} nikoId 
         * @param {Niko} [niko] Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNikos(nikoId: string, niko?: Niko, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Niko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNikos(nikoId, niko, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NikosApi - factory interface
 * @export
 */
export const NikosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NikosApiFp(configuration)
    return {
        /**
         * create nikos
         * @summary createNikos
         * @param {Niko} [niko] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNikos(niko?: Niko, options?: any): AxiosPromise<Niko> {
            return localVarFp.createNikos(niko, options).then((request) => request(axios, basePath));
        },
        /**
         * index nikos
         * @summary indexNikos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexNikos(options?: any): AxiosPromise<Array<Niko>> {
            return localVarFp.indexNikos(options).then((request) => request(axios, basePath));
        },
        /**
         * show nikos
         * @summary showNikos
         * @param {string} nikoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNikos(nikoId: string, options?: any): AxiosPromise<Niko> {
            return localVarFp.showNikos(nikoId, options).then((request) => request(axios, basePath));
        },
        /**
         * update nikos
         * @summary updateNikos
         * @param {string} nikoId 
         * @param {Niko} [niko] Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNikos(nikoId: string, niko?: Niko, options?: any): AxiosPromise<Niko> {
            return localVarFp.updateNikos(nikoId, niko, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NikosApi - object-oriented interface
 * @export
 * @class NikosApi
 * @extends {BaseAPI}
 */
export class NikosApi extends BaseAPI {
    /**
     * create nikos
     * @summary createNikos
     * @param {Niko} [niko] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NikosApi
     */
    public createNikos(niko?: Niko, options?: AxiosRequestConfig) {
        return NikosApiFp(this.configuration).createNikos(niko, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * index nikos
     * @summary indexNikos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NikosApi
     */
    public indexNikos(options?: AxiosRequestConfig) {
        return NikosApiFp(this.configuration).indexNikos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * show nikos
     * @summary showNikos
     * @param {string} nikoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NikosApi
     */
    public showNikos(nikoId: string, options?: AxiosRequestConfig) {
        return NikosApiFp(this.configuration).showNikos(nikoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update nikos
     * @summary updateNikos
     * @param {string} nikoId 
     * @param {Niko} [niko] Patch user properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NikosApi
     */
    public updateNikos(nikoId: string, niko?: Niko, options?: AxiosRequestConfig) {
        return NikosApiFp(this.configuration).updateNikos(nikoId, niko, options).then((request) => request(this.axios, this.basePath));
    }
}


